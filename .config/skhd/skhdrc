# #  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
# #                     be found at https://github.com/koekeishiya/skhd/issues/1
# #
# #                     A hotkey is written according to the following rules:
# #
# #                       hotkey       = <mode> '<' <action> | <action>
# #
# #                       mode         = 'name of mode' | <mode> ',' <mode>
# #
# #                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
# #                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
# #                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
# #
# #                       keysym       = <mod> '-' <key> | <key>
# #
# #                       mod          = 'modifier keyword' | <mod> '+' <mod>
# #
# #                       key          = <literal> | <keycode>
# #
# #                       literal      = 'single letter or built-in keyword'
# #
# #                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
# #
# #                       proc_map_lst = * <proc_map>
# #
# #                       proc_map     = <string> ':' <command> | <string>     '~' |
# #                                      '*'      ':' <command> | '*'          '~'
# #
# #                       string       = '"' 'sequence of characters' '"'
# #
# #                       command      = command is executed through '$SHELL -c' and
# #                                      follows valid shell syntax. if the $SHELL environment
# #                                      variable is not set, it will default to '/bin/bash'.
# #                                      when bash is used, the ';' delimeter can be specified
# #                                      to chain commands.
# #
# #                                      to allow a command to extend into multiple lines,
# #                                      prepend '\' at the end of the previous line.
# #
# #                                      an EOL character signifies the end of the bind.
# #
# #                       ->           = keypress is not consumed by skhd
# #
# #                       *            = matches every application not specified in <proc_map_lst>
# #
# #                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
# #
# #  NOTE(koekeishiya): A mode is declared according to the following rules:
# #
# #                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
# #                                   '::' <name> '@'               | '::' <name>
# #
# #                       name      = desired name for this mode,
# #
# #                       @         = capture keypresses regardless of being bound to an action
# #
# #                       command   = command is executed through '$SHELL -c' and
# #                                   follows valid shell syntax. if the $SHELL environment
# #                                   variable is not set, it will default to '/bin/bash'.
# #                                   when bash is used, the ';' delimeter can be specified
# #                                   to chain commands.
# #
# #                                   to allow a command to extend into multiple lines,
# #                                   prepend '\' at the end of the previous line.
# #
# #                                   an EOL character signifies the end of the bind.
#
# # add an on_enter command to the default mode
# # :: default : yabai -m config active_window_border_color 0xff775759
# #
# # defines a new mode 'test' with an on_enter command, that captures keypresses
# # :: test @ : yabai -m config active_window_border_color 0xff24ccaa
# #
# # from 'default' mode, activate mode 'test'
# # cmd - x ; test
# #
# # from 'test' mode, activate mode 'default'
# # test < cmd - x ; default
# #
# # launch a new terminal instance when in either 'default' or 'test' mode
# # default, test < cmd - return : open -na /Applications/Terminal.app
#
# # application specific bindings
# #
# # cmd - n [
# #     "kitty"       : echo "hello kitty"
# #     *             : echo "hello everyone"
# #     "qutebrowser" : echo "hello qutebrowser"
# #     "terminal"    ~
# #     "finder"      : false
# # ]
#
# # specify a file that should be included as an additional config-file.
# # treated as an absolutepath if the filename begins with '/' otherwise
# # the file is relative to the path of the config-file it was loaded from.
# #
# # .load "/Users/Koe/.config/partial_skhdrc"
# # .load "partial_skhdrc"
#
# # prevent skhd from monitoring events for specific applications.
# #
# # .blacklist [
# #    "kitty"
# #    "terminal"
# #    "qutebrowser"
# # ]
#
# ####### Shortcut Hotkeys #############
# # open terminal
# # alt - return : open /Applications/iTerm.app
#
# # restart Yabi, SpaceBar, and SKHD
# alt + shift - r : \
#     launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"; \
#     skhd --reload
#
# ####### Window Management Hotkeys #############
# # change focus
# # alt - h : yabai -m window --focus west
# # alt - j : yabai -m window --focus south
# # alt - k : yabai -m window --focus north
# # alt - l : yabai -m window --focus east
# # (alt) change focus (using arrow keys)
# hyper - h : yabai -m window --focus west
# hyper - j : yabai -m window --focus south
# hyper - k : yabai -m window --focus north
# hyper - l : yabai -m window --focus east
#
# # shift window in current workspace
# hyper - left  : yabai -m window --swap west || $(yabai -m window --display west; yabai -m display --focus west)
# hyper - down  : yabai -m window --swap south || $(yabai -m window --display south; yabai -m display --focus south)
# hyper - up    : yabai -m window --swap north || $(yabai -m window --display north; yabai -m display --focus north)
# hyper - right : yabai -m window --swap east || $(yabai -m window --display east; yabai -m display --focus east)
# # alternatively, use the arrow keys
# # alt + shift - left : yabai -m window --swap west || $(yabai -m window --display west; yabai -m display --focus west)
# # alt + shift - down : yabai -m window --swap south || $(yabai -m window --display south; yabai -m display --focus south)
# # alt + shift - up : yabai -m window --swap north || $(yabai -m window --display north; yabai -m display --focus north)
# # alt + shift - right : yabai -m window --swap east || $(yabai -m window --display east; yabai -m display --focus east)
#
# # go back to previous workspace (kind of like back_and_forth in i3)
# alt - b : yabai -m space --focus recent
#
# # move focused window to previous workspace
# # alt + shift - b : yabai -m window --space recent; \
# #                   yabai -m space --focus recent
#
# # navigate workspaces next / previous using arrow keys
# meh - left  : yabai -m space --focus prev
# meh - right : yabai -m space --focus next
#
# # move focused window to next/prev workspace
# meh - 1 : yabai -m window --space 1
# meh - 2 : yabai -m window --space 2
# meh - 3 : yabai -m window --space 3
# meh - 5 : yabai -m window --space 5
# meh - 4 : yabai -m window --space 4
# meh - 6 : yabai -m window --space 6
# meh - 7 : yabai -m window --space 7
# meh - 8 : yabai -m window --space 8
# meh - 9 : yabai -m window --space 9
# #alt + shift - 0 : yabai -m window --space 10
#
# # # mirror tree y-axis
# alt + shift - y : yabai -m space --mirror y-axis
#
# # # mirror tree x-axis
# alt + shift - x : yabai -m space --mirror x-axis
#
# # balance size of windows
# alt + shift - 0 : yabai -m space --balance
#
# # increase window size
# alt + shift - a : yabai -m window --resize left:-40:0
# alt + shift - s : yabai -m window --resize bottom:0:40
# alt + shift - w : yabai -m window --resize top:0:-40
# alt + shift - d : yabai -m window --resize right:40:0
#
# # decrease window size
# cmd + shift - a : yabai -m window --resize left:40:0
# cmd + shift - s : yabai -m window --resize bottom:0:-40
# cmd + shift - w : yabai -m window --resize top:0:40
# cmd + shift - d : yabai -m window --resize right:-40:0
#
# # change layout of desktop
# alt - e : yabai -m space --layout bsp
# alt - s : yabai -m space --layout float
# # alt - e : yabai -m window --toggle split
#
# # float / unfloat window and center on screen
# # alt - t : yabai -m window --toggle float;\
# #          yabai -m window --grid 4:4:1:1:2:2
# # float / unfloat window and leave in its current location
# alt + shift - space : yabai -m window --toggle float
# #alt + ctrl - space : yabai -m window --toggle float
#
# # make floating window fill screen
# alt + cmd - up     : yabai -m window --grid 1:1:0:0:1:1
#
# # make floating window fill left-half of screen
# alt + cmd - left   : yabai -m window --grid 1:2:0:0:1:1
#
# # make floating window fill right-half of screen
# alt + cmd - right  : yabai -m window --grid 1:2:1:0:1:1
#
# # close focused window
# alt - w : yabai -m window --close
#
# # toggle sticky
# alt + ctrl - s : yabai -m window --toggle sticky
#
# # enter fullscreen mode for the focused container
# alt - f : yabai -m window --toggle zoom-fullscreen
#
# # move between spaces
# hyper - 1 : yabai -m space --focus 1
# hyper - 2 : yabai -m space --focus 2
# hyper - 3 : yabai -m space --focus 3
# hyper - 4 : yabai -m space --focus 4
# hyper - 5 : yabai -m space --focus 5
# hyper - 6 : yabai -m space --focus 6
# hyper - 7 : yabai -m space --focus 7
# hyper - 8 : yabai -m space --focus 8
# hyper - 9 : yabai -m space --focus 9
# hyper - 0  : yabai -m space --focus 10
#
# # delete focused space
# hyper - q : yabai -m space --destroy
#
# # create a new space, move window and follow focus
# # hyper + w : yabai -m space --create && \
# #                 index="$(yabai -m query --displays --display | jq '.spaces[-1]')" && \
# #                 yabai -m window --space "${index}" && \
# #                 yabai -m space --focus "${index}"
#
# # create a new space
# hyper - n : yabai -m space --create && \
#                 index="$(yabai -m query --displays --display | jq '.spaces[-1]')" && \
#                 yabai -m window --space "${index}" && \
#                 yabai -m space --focus "${index}"
#
# alt - r : yabai -m space --rotate 90
#
# # float / unfloat window and center on screen
# alt - t : yabai -m window --toggle float;\
#           yabai -m window --grid 4:4:1:1:2:2
#
# # # toggle window native fullscreen
# # alt + shift - f : yabai -m window --toggle native-fullscreen
#
# # # focus monitor
# # alt + ctrl - x  : yabai -m display --focus recent
# # alt + ctrl - z  : yabai -m display --focus prev
# # alt + ctrl - c  : yabai -m display --focus next
# # alt + ctrl - 1  : yabai -m display --focus 1
# # alt + ctrl - 2  : yabai -m display --focus 2
# # alt + ctrl - 3  : yabai -m display --focus 3
