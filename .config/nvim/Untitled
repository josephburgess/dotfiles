we have a page for our clients to manage their automated marketing in the frontend CRM (javascript/react) of our django backend app.

Currently, rulesets are shown as a list of 'automations' with details about the automations shown in the table.

originally we only built functionality to edit the 'template' actions, which are actions on a triggered ruleset/automation that will send an email /message template.

however we now want to give users the ability to also edit 'task' actions, which are actions that create a reminder task on the client.

with this in mind we need to expand the current functionality, which - when users click on a template in the list of actions on an automation, pops up a modal to edit that template

we now want to also allow the actions to be clickable and to be shown in an edit omodal.

the ticket is:
Context: we have made an automations page that allows users to edit their own rulesets! expanding this to include tasks

Requirements

task name needs to be clickable

when clicked, modal pops up including

-action type (not editable)
-padding (not editable)
-scheduling (not editable)
-task description (editable)
-task due date (editable)
-task assignee type (editable)
-task category (editable)

add the constants defined in chuck (if they’re not already in that big archer file that gets populated from that script you have to run to export them from chuck → archer) for the dropdowns we’ll need to populate with them

user story

if there is a task action in the table on an automation, when the user clicks on the task name, then a modal should pop up

the 'ActionsList.jsx' file looks like:


import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import SortableTable from 'app/common/components/new-list-view/SortableTable';
import { connect } from 'react-redux';
import { actions as templateActions, selectors } from '../reducers/messageTemplates';
import { actions as automationActions } from '../reducers/automationDetail';
import EditActionModal from 'app/react-app/apps/settings/automations/components/EditActionModal';
import Loading from 'app/common/components/Loading';

const mapStateToProps = state => ({
    templates: selectors.messageTemplatesSelector(state),
    isFetching: selectors.isFetchingSelector(state),
});

const mapDispatchToProps = {
    fetchTemplates: templateActions.fetchTemplates,
    editAction: automationActions.editAction,
};

const ActionsListEmptyItem = () => (
    <tr>
        <td colSpan="4">No actions on ruleset.</td>
    </tr>
);

const TemplateLink = ({ name, onClick }) => {
    if (!name) {
        return <td>—</td>;
    }

    return (
        <td>
            <a href="#" onClick={onClick}>
                {name}
            </a>
        </td>
    );
};

TemplateLink.propTypes = {
    name: PropTypes.string,
    onClick: PropTypes.func,
};

export const ActionsListRow = ({
    class_name,
    humanized_time,
    template_or_task,
    allowed_scheduling,
    send_from_auto_responder_agent,
    onTemplateClick,
}) => {
    const autoResponderDisplay = sendFromAutoResponderAgent =>
        sendFromAutoResponderAgent === null ? '' : sendFromAutoResponderAgent ? 'Yes' : 'No';

    // remove Action and unsmush the title case class name
    const humanName = class_name
        .replace(/^Action/, '')
        .replace(/([A-Z][a-z])/g, ' $1')
        .replace(/([A-Z]{2,})/g, ' $1')
        .trim();

    return (
        <>
            <td>{humanName}</td>
            <td>{humanized_time}</td>
            <TemplateLink
                name={template_or_task?.name}
                onClick={() => template_or_task && onTemplateClick(template_or_task.id)}
            />
            <td>{allowed_scheduling}</td>
            <td>{autoResponderDisplay(send_from_auto_responder_agent)}</td>
        </>
    );
};

ActionsListRow.propTypes = {
    class_name: PropTypes.string,
    humanized_time: PropTypes.string,
    template: PropTypes.object,
    allowed_scheduling: PropTypes.string,
    send_from_auto_responder_agent: PropTypes.bool,
    onTemplateClick: PropTypes.func.isRequired,
};

export const ActionsList = ({ actions, templates, isFetching, fetchTemplates, editAction }) => {
    const [isShowingModal, setIsShowingModal] = useState(false);
    const [selectedAction, setSelectedAction] = useState(null);

    useEffect(() => {
        fetchTemplates();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    const handleTemplateClick = templateId => {
        const action = actions.find(a => a.template && a.template.id === templateId);
        if (action) {
            setSelectedAction(action);
            setIsShowingModal(true);
        }
    };

    const prepareRows = () => {
        return actions.map(action => ({
            ...action,
            template_or_task: action.template ? action.template : {} || 'N/A',
        }));
    };

    const closeModal = () => setIsShowingModal(false);

    const submitAndCloseModal = async values => {
        const submission = {
            id: values.id,
            template_id: values.template,
            send_from_auto_responder_agent: values.send_from_auto_responder_agent,
        };
        editAction(submission);
        closeModal();
    };

    const COLUMNS = [
        { label: 'Action', key: 'class_name' },
        { label: 'Padding', key: 'humanized_time' },
        { label: 'Template/Task', key: 'template_or_task' },
        { label: 'Scheduling', key: 'allowed_scheduling' },
        { label: 'Auto-responder', key: 'send_from_auto_responder_agent' },
    ];

    if (isFetching) return <Loading />;

    return (
        <div className="actions-list-table-container">
            <SortableTable
                columns={COLUMNS}
                EmptyRowComponent={ActionsListEmptyItem}
                RowComponent={props => <ActionsListRow {...props} onTemplateClick={handleTemplateClick} />}
                rows={prepareRows()}
                rowKey="id"
                tableClassName="automations-actions-list"
                rowClassName="actions-list-row"
            />
            {isShowingModal && selectedAction && (
                <EditActionModal
                    initialValues={{ ...selectedAction, template: selectedAction.template?.id }}
                    allAvailableTemplates={templates}
                    formTitle="Edit Action"
                    onClose={closeModal}
                    submitAndCloseModal={submitAndCloseModal}
                />
            )}
        </div>
    );
};

ActionsList.propTypes = {
    actions: PropTypes.array.isRequired,
    templates: PropTypes.array.isRequired,
    isFetching: PropTypes.bool.isRequired,
    fetchTemplates: PropTypes.func.isRequired,
    editAction: PropTypes.func.isRequired,
};

export default connect(
    mapStateToProps,
    mapDispatchToProps
)(ActionsList);

with the EditActionModal looking like:
import React from 'react';
import PropTypes from 'prop-types';
import { reduxForm, Field } from 'redux-form';
import { SingleSelect } from '@nestio/pam';

import ModalForm from 'app/common/components/ModalForm';
import { FormGroup } from 'app/common/components/form-controls/FormGroup';
import { Checkbox } from 'app/common/components/form-controls/Checkbox';

export const EditActionModal = ({
    handleSubmit,
    submitAndCloseModal,
    onClose,
    allAvailableTemplates,
    initialValues,
    formTitle,
}) => {
    const showTemplates = templates => {
        return templates.map(({ id, name }) => ({ label: name, value: id }));
    };

    return (
        <ModalForm onClose={onClose} modalClassName="automation-modal edit-ruleset-action-modal">
            <form onSubmit={handleSubmit(submitAndCloseModal)}>
                <Field name="id" component="input" type="hidden" />
                <h2 className="modal-title">{formTitle}</h2>

                <div className="modal-form-region">
                    <div>
                        <label>Action</label>
                        <p>{initialValues.class_name}</p>
                    </div>

                    <div>
                        <label>Padding</label>
                        <p>{initialValues.humanized_time}</p>
                    </div>

                    <div>
                        <label>Scheduling</label>
                        <p>{initialValues.allowed_scheduling}</p>
                    </div>

                    <div>
                        <label>Send To</label>
                        <p>{initialValues.send_to}</p>
                    </div>

                    <div>
                        <label htmlFor="template">Template</label>
                        <Field
                            name="template"
                            component={FormGroup}
                            fieldComponent={SingleSelect}
                            options={showTemplates(allAvailableTemplates)}
                            disabled={!initialValues.template}
                        />
                    </div>
                    {initialValues.class_name.includes('Email') && (
                        <div>
                            <Field
                                name="send_from_auto_responder_agent"
                                component={FormGroup}
                                fieldComponent={Checkbox}
                                checkboxText="Send from Auto-responder agent"
                                fieldComponentWrapperClassName="send-autoresponder-label-wrapper"
                            />
                        </div>
                    )}
                </div>

                <div className="modal-form-actions">
                    <button
                        type="button"
                        className="btn button-transparent"
                        onClick={onClose}
                        data-testid="edit-action-cancel"
                    >
                        Cancel
                    </button>
                    <button type="submit" className="btn button-primary" data-testid="edit-action-submit">
                        Save
                    </button>
                </div>
            </form>
        </ModalForm>
    );
};
EditActionModal.propTypes = {
    handleSubmit: PropTypes.func,
    submitAndCloseModal: PropTypes.func,
    onClose: PropTypes.func,
    allAvailableTemplates: PropTypes.array,
    initialValues: PropTypes.object,
    formTitle: PropTypes.string,
};

const InitializedForm = reduxForm({
    form: 'settings/automations/edit-ruleset-action',
    touchOnBlur: true,
    touchOnChange: true,
})(EditActionModal);

export default InitializedForm;

we also need to think about how we split this out... i.e. should the editactionmodal then have a prop which is 'action type' or similar - and then we have two sub components for the actual forms which we render depending on what type of action we are editing?
